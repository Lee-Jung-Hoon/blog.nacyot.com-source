# Gem으로 이해하는 패키지 관리자

# 번들러(Bundler)로 배우는 의존성 선언과 의존성 관리

## Gem의 이해

Ruby에는 Gem이라고 하는 훌륭한 패키지 관리자가 있습니다. Gem 명령어를 통해 루비 패키지를 설치하거나 삭제할 수 있으며 특정 버전의 패키지를 사용할 수도 있습니다.

간단한 예를 들어 보죠.

```
$ gem install nokogiri
```

위와 같이 gem 명령어를 통해서 nokogiri를 설치하면 루비 어플리케이션이나 irb 세션에서 설치한 라이브러리를 사용할 수 있습니다.

```
$ irb
> require 'nokogiri'
true
> Nokogiri
Nokogiri
```

이처럼 Nokogiri 클래스가 require되어 사용 가능하다는 것을 알 수 있습니다.

이러한 라이브러리 관리 방식은 매우 편리합니다만, 몇 가지 문제가 있습니다. gem을 통한 라이브러리 관리는 전역적으로 관리됩니다. 따라서 gem에서 설치된 라이브러리는 시스템에서 사용하는 모든 루비 어플리케이션에 적용이 됩니다. 이는 강력하지만 지나치게 강력합니다.

이러한 방식의 가장 큰 한계 중 하나는 라이브러리관 의존관계에 대한 버전 관리가 어렵다는 점입니다. 일반적으로 엔드 유저 어플리케이션의 경우 최신 버전이 항상 선호되는 경향이 있습니다만, 의존 라이브러리들은 최신 버전을 사용하기 어려운 상황도 많이 있습니다. 필요에 따라서는 메이저 버전이 낮은 걸 사용해야 하는 프로젝트가 있을 수도 있고 최신 버전이 필요할 수도 있으며, 이 의존 라이브러리가 사용하는 라이브러리들에서 필요한 다른 의존 라이브러리의 버전이 특정 범위로 강제가 되고, 어쩌고 저쩌고... 이렇게 계속흘러가다 보면 의존 라이브러리 관리를 전역적으로 한다는 게 그렇게 간단한 문제가 아니라는 걸 알 수 있습니다.

여기까지 오면 꽤나 gem의 역할은 꽤나 명확해지는 걸 알 수 있습니다. gem은 패키지 관리자이고, 이러한 패키지 관리자는 프로젝트를 위한 도구가 아니라는 점입니다. 각각의 프로젝트는 자신만의 의존 라이브러리 목록을 관리할 수 있어야합니다. 그리고 이러

## Bundler의 이해